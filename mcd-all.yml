AWSTemplateFormatVersion: 2010-09-09
Description: |
    Create 3 IAM Roles
    mcd-gateway-role that is assigned to Multicloud Defense gateway instances.
    mcd-controller-role is a cross account IAM role used by the Multicloud Defense Controller
    to manage the customer's AWS account (create gateway instances etc).
    mcd-inventory-role that enables posting of CloudTrail updates to the Multicloud Defense Controller.
    Create S3 bucket and enable CloudTrail to go this bucket.
    Enable Event notification on the S3 bucket to notify the Multicloud Defense Controller
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: "Multicloud Defense Deployment"
              Parameters:
                  - DeploymentName
                  - MCDControllerAccount
            - Label:
                  default: "IAM Roles Configuration"
              Parameters:
                  - ExternalId
                  - RoleNamePrefix
            - Label:
                  default: "Inventory/Discovery Configuration"
              Parameters:
                  - S3Bucket
                  - ObjectDuration
                  - CloudTrail
        ParameterLabels:
            DeploymentName:
                default: "Multicloud Defense Controller's Deployment Name (DO NOT CHANGE THIS unless you talk to Cisco)"
            MCDControllerAccount:
                default: "Multicloud Defense Controller's Account Number (DO NOT CHANGE THIS unless you talk to Cisco)"
            ExternalId:
                default: "External ID used for cross account IAM Role's Trust Settings (DO NOT CHANGE THIS unless you talk to Cisco)"
            RoleNamePrefix:
                default: "Prefix to use for all the IAM Role Names"
            S3Bucket:
                default: "S3 Bucket Name"
            ObjectDuration:
                default: "Number of days to keep the logs"
            CloudTrail:
                default: "Create a new CloudTrail (S3 Bucket is required) to enable real-time inventory"
Parameters:
    DeploymentName:
        Description: Multicloud Defense Internal Deployment Name (If you launched this from the Multicloud Defense Dashboard, it's prefilled, otherwise talk to Cisco sales for the info).
        Type: String
        Default: prod1
    MCDControllerAccount:
        Description: Account number where the Multicloud Defense Controller Runs (If you launched this from the Multicloud Defense Dashboard, it's prefilled, otherwise talk to Cisco sales for the info)
        Type: Number
    ExternalId:
        Description: ExternalId used by the IAM role as a trust relationship with the caller (If you launched this from the Multicloud Defense Dashboard, it's prefilled, otherwise leave it to the default and change it later during the account addition on Multicloud Defense Dashboard).
        Type: String
        Default: 123456789
    RoleNamePrefix:
        Description: Prefix to use for the IAM roles created (letters and numbers only, no hyphens, underscores or any other special characters)
        Type: String
        Default: mcd 
    S3Bucket:
        Description: Create S3 Bucket where VPC Flow Logs, DNS Query Logs and CloudTrail events are stored. Leave it to empty if you are not going to use Discovery/Real-time inventory Features
        Type: String
        Default: ""
    ObjectDuration:
        Description: Delete all objects (vpc flow logs, dns logs, cloudtrail logs) after days
        Type: Number
        Default: 1
    CloudTrail:
        Description: If you already have a multi-region CloudTrail in your account, choose false to skip CloudTrail creation.
        Type: String
        Default: "true"
        AllowedValues:
            - true
            - false
Conditions:
    CreateS3Bucket:
        Fn::Not: [Fn::Equals: [Ref: S3Bucket, ""]]
    CreateCloudTrail:
        Fn::And:
            - Fn::Not: [Fn::Equals: [Ref: S3Bucket, ""]]
            - Fn::Equals: [Ref: CloudTrail, "true"]

Resources:
    MCDCloudwatchEventRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                Fn::Sub: "${RoleNamePrefix}-inventory-role"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: mcd-cross-account-policy
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action: events:PutEvents
                            Resource:
                                Fn::Sub: "arn:aws:events:*:${MCDControllerAccount}:event-bus/default"
                          - Effect: Allow
                            Action: events:InvokeApiDestination
                            Resource:
                                Fn::Sub: "arn:aws:events:*:${AWS::AccountId}:api-destination/*"
    MCDGatewayRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                Fn::Sub: "${RoleNamePrefix}-gateway-role"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: mcd-gateway-policy
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:PutObject
                                - s3:ListBucket
                            Resource: "arn:aws:s3:::*/*"
                          - Effect: Allow
                            Action: kms:Decrypt
                            Resource: "*"
                          - Effect: Allow
                            Action: secretsmanager:GetSecretValue
                            Resource: "*"

    MCDGatewayInstanceRole:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName:
                Ref: MCDGatewayRole
            Path: /
            Roles:
                - Ref: MCDGatewayRole

    MCDControllerRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                Fn::Sub: "${RoleNamePrefix}-controller-role"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          AWS:
                              Fn::Sub: "arn:aws:iam::${MCDControllerAccount}:root"
                      Action: sts:AssumeRole
                      Condition:
                          StringEquals:
                              sts:ExternalId:
                                  Ref: ExternalId
            Path: /
            Policies:
                - PolicyName: mcd-controller-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - acm:DescribeCertificate
                                - acm:ListCertificates
                                - apigateway:GET
                                - ec2:*
                                - elasticloadbalancing:*
                                - events:*
                                - globalaccelerator:*
                                - iam:ListPolicies
                                - iam:ListRoles
                                - iam:ListRoleTags
                                - logs:*
                                - route53resolver:*
                                - servicequotas:GetServiceQuota
                                - s3:ListAllMyBuckets
                                - s3:ListBucket
                            Resource: "*"
                          - Fn::If:
                                - CreateS3Bucket
                                - Effect: Allow
                                  Action:
                                      - s3:GetObject
                                  Resource:
                                      Fn::Sub: "arn:aws:s3:::${S3Bucket}/*"
                                - Ref: AWS::NoValue
                          - Effect: Allow
                            Action:
                                - iam:GetRole
                                - iam:ListRolePolicies
                                - iam:GetRolePolicy
                            Resource:
                                - Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/${RoleNamePrefix}-controller-role"
                                - Fn::GetAtt: MCDGatewayRole.Arn
                                - Fn::GetAtt: MCDCloudwatchEventRole.Arn
                          - Effect: Allow
                            Action:
                                - iam:PassRole
                            Resource:
                                - Fn::GetAtt: MCDGatewayRole.Arn
                                - Fn::GetAtt: MCDCloudwatchEventRole.Arn
                          - Effect: Allow
                            Action: iam:CreateServiceLinkedRole
                            Resource: arn:aws:iam::*:role/aws-service-role/*
                          - Effect: Allow
                            Action:
                                - secretsmanager:CreateSecret
                                - secretsmanager:UpdateSecret
                                - secretsmanager:DeleteSecret
                                - secretsmanager:GetSecretValue
                                - secretsmanager:PutSecretValue
                            Resource: arn:aws:secretsmanager:*:*:secret:events!*
    MCDCloudTrail:
        Type: AWS::CloudTrail::Trail
        Condition: CreateCloudTrail
        DependsOn:
            - MCDS3BucketPolicy
        Properties:
            TrailName:
                Fn::Sub: "${RoleNamePrefix}-cloudtrail"
            EnableLogFileValidation: True
            IsMultiRegionTrail: True
            IncludeGlobalServiceEvents: True
            IsLogging: True
            S3BucketName:
                Ref: MCDS3Bucket

    MCDS3Bucket:
        Type: AWS::S3::Bucket
        Condition: CreateS3Bucket
        Properties:
            BucketName:
                Ref: S3Bucket
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: "AES256"
            LifecycleConfiguration:
                Rules:
                - Id:
                    Fn::Sub: "Delete all objects after ${ObjectDuration} day(s)"
                  ExpirationInDays:
                    Ref: ObjectDuration
                  Status: "Enabled"

            NotificationConfiguration:
                QueueConfigurations:
                    - Event: "s3:ObjectCreated:*"
                      Queue:
                          Fn::Sub: "arn:aws:sqs:${AWS::Region}:${MCDControllerAccount}:inventory_logs_queue_${DeploymentName}_${AWS::Region}"

    MCDS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Condition: CreateS3Bucket
        Properties:
            Bucket:
                Ref: MCDS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action: "s3:GetBucketAcl"
                      Effect: Allow
                      Resource:
                          Fn::GetAtt: MCDS3Bucket.Arn
                      Principal:
                          Service: "cloudtrail.amazonaws.com"
                    - Action: "s3:PutObject"
                      Effect: Allow
                      Resource:
                          Fn::Sub: arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
                      Principal:
                          Service: "cloudtrail.amazonaws.com"
                      Condition:
                          StringEquals:
                              s3:x-amz-acl: "bucket-owner-full-control"
                    - Action: "s3:GetBucketAcl"
                      Effect: Allow
                      Resource:
                          Fn::GetAtt: MCDS3Bucket.Arn
                      Principal:
                          Service: "delivery.logs.amazonaws.com"
                    - Action: "s3:PutObject"
                      Effect: Allow
                      Resource:
                          Fn::Sub: arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
                      Principal:
                          Service: "delivery.logs.amazonaws.com"
                      Condition:
                          StringEquals:
                              s3:x-amz-acl: "bucket-owner-full-control"

Outputs:
    AccountNumber:
        Value:
            Ref: AWS::AccountId
    MCDControllerRoleArn:
        Value:
            Fn::GetAtt: MCDControllerRole.Arn
    MCDInventoryRoleArn:
        Value:
            Fn::GetAtt: MCDCloudwatchEventRole.Arn
    MCDFirewallRoleName:
        Value:
            Ref: MCDGatewayRole
    MCDS3BucketName:
        Condition: CreateS3Bucket
        Value:
            Ref: MCDS3Bucket
    MCDS3BucketArn:
        Condition: CreateS3Bucket
        Value:
            Fn::GetAtt: MCDS3Bucket.Arn
